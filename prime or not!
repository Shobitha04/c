Let's see how it works for 17:

i starts from 2.
In the first iteration: 2 * 2 = 4 <= 17, and 17 % 2 is not 0, so the loop continues.
In the second iteration: 3 * 3 = 9 <= 17, and 17 % 3 is not 0, so the loop continues.
In the third iteration: 4 * 4 = 16 <= 17, and 17 % 4 is not 0, so the loop continues.
In the fourth iteration: 5 * 5 = 25 > 17, so the loop stops.
Since the loop didn't find any divisor of 17 other than 1 and 17 itself, the function returns 1, indicating that 17 is a prime number.#include<stdio.h>


int isPrime(int num) {
    if (num <= 1) {
        return 0; // 0 and 1 are not prime
    }
    for (int i = 2; i * i <= num; ++i) {
        if (num % i == 0) {
            return 0; // If the number is divisible by any number other than 1 and itself, it's not prime
        }
    }
    return 1; // If the loop completes without finding a divisor, the number is prime
}

int main() {
    int num;
    printf("Enter a positive integer: ");
    scanf("%d", &num);

    if (isPrime(num)) {
        printf("%d is a prime number.\n", num);
    } else {
        printf("%d is not a prime number.\n", num);
    }

    return 0;
}
